<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:sw="http://www.sitewhere.com/schema/sitewhere/ce/tenant"
	xmlns:global="http://www.sitewhere.com/schema/sitewhere/ce"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
           http://www.sitewhere.com/schema/sitewhere/ce http://www.sitewhere.org/schema/sitewhere/ce/current/sitewhere.xsd
           http://www.sitewhere.com/schema/sitewhere/ce/tenant http://www.sitewhere.org/schema/sitewhere/ce/current/sitewhere-tenant.xsd">
           
	<!-- Load property values for substitution -->
	<context:property-placeholder
		location="file:${catalina.home}/conf/sitewhere/${tenant.id}-tenant.properties"
		ignore-resource-not-found="true"/>
	
	<!-- ######################## -->
	<!-- # TENANT CONFIGURATION # -->
	<!-- ######################## -->
	<sw:tenant-configuration>
	
		<!-- #################### -->
		<!-- # GLOBAL OVERRIDES # -->
		<!-- #################### -->
		<sw:globals>
			<!--  
			<global:groovy-configuration debug="true" verbose="true"/>
			-->
		</sw:globals>
		
		<!-- ########################### -->
		<!-- # DATASTORE CONFIGURATION # -->
		<!-- ########################### -->
		<sw:tenant-datastore>
		
			<!-- Default MongoDB Datastore -->
			<!--
			<sw:mongo-tenant-datastore useBulkEventInserts="true"
				bulkInsertMaxChunkSize="1000"/>
			-->
			<!-- Default HBase Datastore -->
			<sw:hbase-tenant-datastore/>

			<!-- Improves performance by using Hazelcast for distributed caching -->
			<sw:hazelcast-cache/>
			
			<!-- Initializes data model with sample data if datastore is empty -->
			<sw:default-device-model-initializer/>
			<sw:default-asset-model-initializer/>
			<sw:default-schedule-model-initializer/>

		</sw:tenant-datastore>
		
		<!-- ######################## -->
		<!-- # DEVICE COMMUNICATION # -->
		<!-- ######################## -->
		<sw:device-communication>
		
			<!-- Inbound event sources -->
			<sw:event-sources>

				<!-- Event source for protobuf messages over MQTT -->
				<sw:mqtt-event-source sourceId="protobuf" hostname="activemq"
					port="1883" topic="SiteWhere/input/protobuf">
					<sw:protobuf-event-decoder/>
				</sw:mqtt-event-source>
				
				<!-- Example of secured MQTT over TLS -->
				<!--  
				<sw:mqtt-event-source sourceId="protobuf" protocol="tls"
					hostname="localhost" port="8883" topic="SiteWhere/input/protobuf"
					trustStorePath="/path/to/truststore.jks"
					trustStorePassword="password">
					<sw:protobuf-event-decoder/>
				</sw:mqtt-event-source>
				-->

				<!-- Event source for JSON messages over MQTT -->
				<sw:mqtt-event-source sourceId="json" hostname="activemq" port="1883"
					topic="SiteWhere/input/jsonbatch">
					<sw:json-event-decoder/>
				</sw:mqtt-event-source>

                <!-- Event source for protobuf messages over AMQP -->
                <!--<sw:azure-eventhub-event-source sourceId="eventhub" targetFqn="servicebus.windows.net"-->
                                                <!--namespace="YourNamespace" entityPath="YourEntityPath" partitionCount="8"-->
                                                <!--zkStateStore="127.0.0.1:2181"-->
                                                <!--username="YourUsername" password="YourPassword">-->
                    <!--<sw:protobuf-event-decoder/>-->
                <!--</sw:azure-eventhub-event-source>-->
				
				<!-- Event source for protobuf messages over ActiveMQ queue -->
				<!--  
				<sw:activemq-event-source sourceId="activemq" transportUri="tcp://localhost:1234"
					queueName="SITEWHERE.IN" numConsumers="10" dataDirectory="${catalina.home}/amqdata/${tenant.id}">
					<sw:protobuf-event-decoder/>
				</sw:activemq-event-source>
				-->
				
				<!-- Event source for Stomp messages over ActiveMQ queue -->
				<!--  
				<sw:activemq-event-source sourceId="stomp"
					transportUri="stomp://localhost:2345?trace=true" queueName="SITEWHERE.STOMP"
					numConsumers="10" dataDirectory="${catalina.home}/stompdata/${tenant.id}">
					<sw:json-event-decoder/>
				</sw:activemq-event-source>
				-->

				<!-- Example of Groovy decoder parsing of websocket payload -->
				<!--  
				<sw:web-socket-event-source sourceId="websocket"
					webSocketUrl="ws://localhost:6543/sitewhere/stringsender" payloadType="string">
					<sw:groovy-string-event-decoder scriptPath="customDecoder.groovy"/>
				</sw:web-socket-event-source>
				-->

			</sw:event-sources>
		
			<!-- Inbound Processing Strategy -->
			<sw:inbound-processing-strategy>
				<sw:default-inbound-processing-strategy
					numEventProcessorThreads="10" enableMonitoring="false" monitoringIntervalSec="3"/>
			</sw:inbound-processing-strategy>
			
			<!-- Device registration -->
			<sw:registration>
				<sw:default-registration-manager allowNewDevices="true"/>
			</sw:registration>
			
			<!-- Batch operation management -->
			<sw:batch-operations>
				<sw:default-batch-operation-manager
					throttleDelayMs="1000"/>
			</sw:batch-operations>
			
			<!-- Device command routing -->
			<sw:command-routing>
				<sw:specification-mapping-router defaultDestination="default">
					<sw:mapping specification="d2604433-e4eb-419b-97c7-88efe9b2cd41"
						destination="hybrid"/>
					<sw:mapping specification="7dfd6d63-5e8d-4380-be04-fc5c73801dfb"
						destination="hybrid"/>
					<sw:mapping specification="5a95f3f2-96f0-47f9-b98d-f5c081d01948"
						destination="hybrid"/>
				</sw:specification-mapping-router>
			</sw:command-routing>
			
			<!-- Outbound command destinations -->
			<sw:command-destinations>

				<!-- Delivers commands via MQTT -->
				<sw:mqtt-command-destination destinationId="default"
					hostname="activemq" port="1883">
					<sw:protobuf-command-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>
				
				<!-- Delivers commands via MQTT -->
				<!--  
				<sw:mqtt-command-destination destinationId="default"
					protocol="tls" hostname="localhost" port="8883" trustStorePath="/path/to/truststore.jks"
					trustStorePassword="password">
					<sw:protobuf-command-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>
				-->

				<!-- Used for devices that expect hybrid protobuf/Java invocations -->
				<sw:mqtt-command-destination destinationId="hybrid"
					hostname="activemq" port="1883">
					<sw:java-protobuf-hybrid-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>

				<!-- Deliver commands via Twilio SMS message. -->
				<!-- 
				<sw:twilio-command-destination destinationId="twilio"
					accountSid="${twilio.account.sid}" authToken="${twilio.auth.token}" fromPhoneNumber="${twilio.from.phone.number}">
					<sw:protobuf-command-encoder/>
					<sw:parameter-extractor ref="externalParameterExtractor"/>
				</sw:twilio-command-destination>
			 	-->

			</sw:command-destinations>

		</sw:device-communication>
		
		<!-- ############################ -->
		<!-- # INBOUND PROCESSING CHAIN # -->
		<!-- ############################ -->
		<sw:inbound-processing-chain>
			
			<!-- Store events -->
			<sw:event-storage-processor/>
			
			<!-- Allow devices to dynamically register -->
			<sw:registration-processor/>
			
			<!-- Allow devices to create streams and send stream data -->
			<sw:device-stream-processor/>

		</sw:inbound-processing-chain>
		
		<!-- ############################# -->
		<!-- # OUTBOUND PROCESSING CHAIN # -->
		<!-- ############################# -->
		<sw:outbound-processing-chain>
		
			<!-- Routes commands for outbound processing -->
			<sw:command-delivery-event-processor/>
			
			<!-- Send outbound device events over Hazelcast -->
			<sw:hazelcast-event-processor/>
			
			<!-- Performs zone checking for locations -->
			<!-- 
			<sw:zone-test-event-processor>
				<sw:zone-test zoneToken="777fa4e5-bc2f-458b-9968-b598b2e2d2ca" condition="outside"
					alertLevel="error" alertType="off.site" alertMessage="Asset has left the worksite."/>
			</sw:zone-test-event-processor>
			 -->

			<!-- Send matching events to the given MQTT topic -->
			<!-- 
			<sw:mqtt-event-processor hostname="localhost" port="1883">
				<sw:filters>
					<sw:site-filter operation="include" site="bb105f8d-3150-41f5-b9d1-db04965668d3"/>
					<sw:specification-filter operation="exclude"
						specification="417b36a8-21ef-4196-a8fe-cc756f994d0b"/>
					<sw:groovy-filter scriptPath="filter.groovy"/>
				</sw:filters>
				<sw:groovy-route-builder scriptPath="route.groovy"/>
			</sw:mqtt-event-processor>
			 -->
			
			<!-- Index outbound device events in Solr -->
			<!-- 
			<sw:solr-event-processor/>
			 -->

			<!-- Sends events to an Azure EventHub -->
			<!-- 
			<sw:azure-eventhub-event-processor sasKey="{azure.sas.key}"
				sasName="default" serviceBusName="sitewhere.servicebus.windows.net" eventHubName="sitewhere"/>
			 -->
			 
			<!-- Sends events to InitialState.com -->
			<!-- 
			<sw:initial-state-event-processor streamingAccessKey="your_access_key"/>
			 -->
			 
			<!-- Sends events to dweet.io -->
			<!-- 
			<sw:dweet-io-event-processor/>
			 -->

			<!-- Processes event streams using Siddhi for complex event processing -->
			<!-- 
			<sw:siddhi-event-processor>
			
				<sw:siddhi-query
					selector="from e1 = MeasurementStream[mxname == 'engine.temp'], e2 = MeasurementStream[mxname == 'engine.temp' and e1.assignment == assignment and ((e2.mxvalue - e1.mxvalue) > 5)] select e1.assignment insert into EngineTempRose">
					<sw:stream-debugger stream="EngineTempRose"/>
				</sw:siddhi-query>
				
				<sw:siddhi-query
					selector="from e1 = LocationStream, e2 = LocationStream[(latitude != e1.latitude or longitude != e1.longitude) and e1.assignment == assignment] select e2.assignment, e2.latitude, e2.longitude insert into LocationChanged">
					<sw:stream-debugger stream="LocationChanged"/>
				</sw:siddhi-query>
				
				<sw:siddhi-query
					selector="from every e1 = AlertStream[type == 'low.bp'] -> e2 = AlertStream[type == 'g.shock' and e1.assignment == assignment] within 7 sec select e1.assignment insert into Fainted">
					<sw:groovy-stream-processor scriptPath="siddhiCreateAlert.groovy"
						stream="Fainted"/>
				</sw:siddhi-query>

			</sw:siddhi-event-processor>
			-->

			<!-- Stream data to an external WSO2 CEP instance -->
			<!-- 
			<sw:wso2-cep-event-processor/>
			 -->

		</sw:outbound-processing-chain>
		
		<!-- #################### -->
		<!-- # ASSET MANAGEMENT # -->
		<!-- #################### -->
		<sw:asset-management>

			<!-- Loads assets from WSO2 Identity Server -->
			<!--  
			<sw:wso2-identity-asset-module moduleId="wso2"
				scimUsersUrl="https://wso2is:9443/wso2/scim/Users" username="admin" password="admin"
				ignoreBadCertificate="true"/>
			-->

			<!-- These are now loaded into the datastore -->
			<!--  
			<sw:filesystem-device-asset-module/>
			<sw:filesystem-hardware-asset-module/>
			<sw:filesystem-person-asset-module/>
			<sw:filesystem-location-asset-module/>
			-->

		</sw:asset-management>

	</sw:tenant-configuration>

</beans>
